[{"title":"第2周","date":"2024-06-03T04:42:24.000Z","path":"2024/06/03/2nd/","text":"周一实践证明，精力是一定的，不仅意味着是有限的，同时意味着总要花在什么地方。课下时间全部用来复习备考现在看来显然不现实，因为那是靠自制力撑着，而慢慢发现自己远没有自己想象中那么强大，所以学着学着就学不动了。那剩下的时间用来干啥呢？如果不学东西的话，可能自制力尚存可能会去看看电视剧，不会选择开一个新游戏(毕竟两周就要考试了)，但是三国也不总是能吸引我，更多的是抱着“一半儿都看完了”的想法，初衷应该是积累谈资。但是看着看着不想看了，那去干啥呢？大概率是不会去看书的，因为书也是本着“提升自身”的想法挑选和阅读的，买的几本不像爽文，没那么吸引我。那就无所事事了呗，好了，现在可能会想着找找感官的刺激了，事后再感慨一下“生理效应真强大”，以及“其实欲望也没这么强烈，只是无所事事罢了”。所以，还是重新捡起来好了，也别等着考完试了，不耽误的。相反，学点儿东西自以为有所得的正反馈会使阁下的状态不错，那两周差不多就是这样的。因为精力是一定的，所以，戒除一种习惯比较好的方式可能不是自己跟自己过不去，用意志力控制自己，因为意志力不会总像开始时那么强大，今天身体不舒服或者心情不太好之类的生理或心理方面的因素都会影响状态，到那时候可能就要就范了。因此，比较好的方式可能是，用养成另一种习惯来替换原来的习惯。这个新的习惯要具备以下特征：能带来正向反馈、难点儿的蹦蹦也能够着、可持续等，最理想的当然时喜欢了，热爱可抵岁月漫长，越来越以为然。 既已名正言顺，就先睡会儿啦，下午还要课呢，下课还得回来学东西呢。 对了，是有些怕被笑话的顾虑的，是指学的东西方面，一天就学这么一点儿，而且还都是皮毛，打卡好像是显得有些滑稽，但是如果这样或多或少能帮阁下走下去，何乐而不为呢。但是确实效率有些低下了，想一字不落的记下来显然不现实，穷则思变。","content":"<h3 id=\"周一\"><a href=\"#周一\" class=\"headerlink\" title=\"周一\"></a>周一</h3><p>实践证明，精力是一定的，不仅意味着是有限的，同时意味着总要花在什么地方。<br>课下时间全部用来复习备考现在看来显然不现实，因为那是靠自制力撑着，而慢慢发现自己远没有自己想象中那么强大，所以学着学着就学不动了。<br>那剩下的时间用来干啥呢？如果不学东西的话，可能自制力尚存可能会去看看电视剧，不会选择开一个新游戏(毕竟两周就要考试了)，但是三国也不总是能吸引我，更多的是抱着“一半儿都看完了”的想法，初衷应该是积累谈资。但是看着看着不想看了，那去干啥呢？大概率是不会去看书的，因为书也是本着“提升自身”的想法挑选和阅读的，买的几本不像爽文，没那么吸引我。那就无所事事了呗，好了，现在可能会想着找找感官的刺激了，事后再感慨一下“生理效应真强大”，以及“其实欲望也没这么强烈，只是无所事事罢了”。<br>所以，还是重新捡起来好了，也别等着考完试了，不耽误的。相反，学点儿东西自以为有所得的正反馈会使阁下的状态不错，那两周差不多就是这样的。<br>因为精力是一定的，所以，戒除一种习惯比较好的方式可能不是自己跟自己过不去，用意志力控制自己，因为意志力不会总像开始时那么强大，今天身体不舒服或者心情不太好之类的生理或心理方面的因素都会影响状态，到那时候可能就要就范了。因此，比较好的方式可能是，用养成另一种习惯来替换原来的习惯。这个新的习惯要具备以下特征：能带来正向反馈、难点儿的蹦蹦也能够着、可持续等，最理想的当然时喜欢了，热爱可抵岁月漫长，越来越以为然。</p>\n<p>既已名正言顺，就先睡会儿啦，下午还要课呢，下课还得回来学东西呢。</p>\n<p>对了，是有些怕被笑话的顾虑的，是指学的东西方面，一天就学这么一点儿，而且还都是皮毛，打卡好像是显得有些滑稽，但是如果这样或多或少能帮阁下走下去，何乐而不为呢。<br>但是确实效率有些低下了，想一字不落的记下来显然不现实，穷则思变。</p>\n","categories":[],"tags":[{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"}]},{"title":"第1周","date":"2024-05-28T14:52:04.000Z","path":"2024/05/28/1st-week/","text":"周一周一到周五都有课。17周考试，这都14周了，离散、大物、高数都挺慌的。还快要考CET-6了，晚自习都在刷6级真题，回来随便学学就快到点儿了.本来是想22:30就下班儿的，因为这两天的睡觉质量都不太好，老做梦，昨天还梦到我亲眼看到一个哥们儿摔s了，我要不是抓住布缓冲一下也要g，难绷。 很多内容之前都没接触过，就比如说php，但是遇到了再去补一下，这样效率可能更高些，反倒是先系统的学会很低效，边用边查边学可能更好些. md 已经熄灯了 下了下了 希望一夜无梦 周二PHP + socket编码 发送 HTTP请求，写的差不多了，明天拿下 昨天好像没做梦 不错不错下了考试月 忙忙忙话说马上要高考了来着 周三socket编码发送POST请求基本上算搞好了 还是有点儿小问题现在都用HTTPS协议了 用HTTP协议的网站还真不太好找 今天下午参加了个活动，白嫖了个书签，不错不错首先是几个小活动，拼拼图、写心愿、给喜欢的主题画投票，最后白嫖了一个书签 “诸葛亮多智而进妖”，诚不欺我 考试月，要开始复习了，技术的学习得放一放了 周四今天下雨了，坐了公交车，还挺快的其实 今天午觉睡得也不太好，感觉脑子懵懵的，把校选修课的作业敲完了，感觉脑子转的有点儿慢 钱权名“贪夫殉财兮，烈士殉名。夸者死权兮，品庶每生” 。贪婪的人为了财富而死，有志节的人为了名声而死。追求权势的人最终会因权力而死，而普通人则能安享天年。人生在世，大多数人穷其一生所追求的，好像不外乎钱、权、名。太史公在《史记·货殖列传》里写道，“天下熙熙，皆为利来；天下攘攘，皆为利往 “。人们的大部分行为和活动都是出于对利益的追求，人类社会活动中普遍存在的利益驱动现象。当然也反映了人们对于生存和发展的基本需求，以及社会经济发展的动力 。在社会主义价值观中，虽然强调集体利益和社会公平，但也不否认个人在合法合规的前提下追求正当利益的合理性。所谓“君子爱财，取之有道”，此之谓也。《Game of Thrones》中有“Power resides where men believe it resides.”，翻译一下，就是“权力在于人心所向”。权力并不固定存在于某个位置或某个人，而是存在于人们对权力的共同信念和认可中。在《权力的游戏》这个虚构的世界中，这句话体现了权力的动态性和相对性。权力不是绝对的或固化的，而是由人们的信念、恐惧、尊重和服从所支撑。如果人们不再相信某个权力机构或个人拥有权力，那么这个权力就会消失。相反，如果人们普遍认可某个个体或组织的权威，那么这个个体或组织就会拥有权力。习近平总书记在党史学习教育动员大会上也指出：“历史充分证明，江山就是人民，人民就是江山，人心向背关系党的生死存亡。”或许，这才是真理。想起了暑假里读到的米兰昆德拉的《不朽》，人为了在世界上留下痕迹、为了“不朽”而奔走着。“名”，既可以是人们追求的目标，也可以是人们被束缚的枷锁。一方面，它可以给予人一种超越死亡的幻觉，使人们相信自己可以通过名声在历史中永生；另一方面，名声也是一种虚荣，它可能导致个人的自我迷失和真实生活的丧失。但最重要的是，死后万事空与否谁能说清呢，如果死后万事皆空，那以“不朽“为目的苦苦追求在生前或许还有些用的“名“，就显得很可笑了。“了却君王天下事，赢得生前身后名。”古人好像不少都追求气节、名声，所谓“留名青史“、“遗臭万年”、“后人自有评说“，对于那些为气节而死的行为，我向来是报以敬畏的态度，因为还不能完全理解；再者就是入朝为官，经世济民，所谓”万般皆下品，唯有读书高“，而寒窗苦读十载不过是为了进入仕途；至于钱，似乎总和俗挂钩，体面人是不好直言的。古代”四民“的等级制度，士人处在顶端，商人似乎为人所不齿，与今天似乎有很大的不同。我以为，实践是检验真理的唯一标准，如果没追求并得到一样东西，总会有执念。至于得到之后是感慨不过如此、自嘲误入歧途，还是内心满足充盈又是另一说了。我们大多数人对钱、权、名没有这么大的执念，或许只是因为没得到，也就不会碰到考验与抉择了。就是说，或许我们没自己想象中的清心寡欲，只是碰巧没轮到我们罢了，因而“品庶每生“。总之，原则之内，追求钱、权、名无可厚非，个人的选择罢了。对于人生的意义，众说纷纭，无所谓对错，但“有限的时间内尽可能的体验“或许能作为一个解。 这两天状态都不太好，昨天下午、今天下午，心情都不太好，可以是身体不太舒服，加上快考试了心里没底有些焦虑，今天晚上种种原因吧，复习的不太顺利，但也算是开始了吧，明天要好好复习了一个月，总有一两天状态欠佳，一直从容倒不切实际，睡了睡了","content":"<h3 id=\"周一\"><a href=\"#周一\" class=\"headerlink\" title=\"周一\"></a>周一</h3><p>周一到周五都有课。17周考试，这都14周了，离散、大物、高数都挺慌的。还快要考CET-6了，晚自习都在刷6级真题，回来随便学学就快到点儿了.<br>本来是想22:30就下班儿的，因为这两天的睡觉质量都不太好，老做梦，昨天还梦到我亲眼看到一个哥们儿摔s了，我要不是抓住布缓冲一下也要g，难绷。</p>\n<p>很多内容之前都没接触过，就比如说php，但是遇到了再去补一下，这样效率可能更高些，反倒是先系统的学会很低效，边用边查边学可能更好些.<br><img src=\"/../images/0527.png\" alt=\"0527\"></p>\n<p>md 已经熄灯了 下了下了 希望一夜无梦</p>\n<h3 id=\"周二\"><a href=\"#周二\" class=\"headerlink\" title=\"周二\"></a>周二</h3><p>PHP + socket编码 发送 HTTP请求，写的差不多了，明天拿下<br><img src=\"/../images/0528.png\" alt=\"0528\"></p>\n<p>昨天好像没做梦 不错不错<br>下了<br>考试月 忙忙忙<br>话说马上要高考了来着 </p>\n<h3 id=\"周三\"><a href=\"#周三\" class=\"headerlink\" title=\"周三\"></a>周三</h3><p>socket编码发送POST请求基本上算搞好了 还是有点儿小问题<br>现在都用HTTPS协议了 用HTTP协议的网站还真不太好找</p>\n<p>今天下午参加了个活动，白嫖了个书签，不错不错<br>首先是几个小活动，拼拼图、写心愿、给喜欢的主题画投票，最后白嫖了一个书签<br><img src=\"/../images/052901.jpg\"><br><img src=\"/../images/052902.jpg\"><br><img src=\"/../images/052903.jpg\"><br><img src=\"/../images/052904.jpg\"><br><img src=\"/../images/052905.jpg\"></p>\n<p>“诸葛亮多智而进妖”，诚不欺我<br><img src=\"/../images/052906.jpg\"></p>\n<p>考试月，要开始复习了，技术的学习得放一放了</p>\n<h3 id=\"周四\"><a href=\"#周四\" class=\"headerlink\" title=\"周四\"></a>周四</h3><p>今天下雨了，坐了公交车，还挺快的其实</p>\n<p>今天午觉睡得也不太好，感觉脑子懵懵的，把校选修课的作业敲完了，感觉脑子转的有点儿慢</p>\n<blockquote>\n<p>钱权名<br>“贪夫殉财兮，烈士殉名。夸者死权兮，品庶每生” 。贪婪的人为了财富而死，有志节的人为了名声而死。追求权势的人最终会因权力而死，而普通人则能安享天年。<br>人生在世，大多数人穷其一生所追求的，好像不外乎钱、权、名。<br>太史公在《史记·货殖列传》里写道，“天下熙熙，皆为利来；天下攘攘，皆为利往 “。人们的大部分行为和活动都是出于对利益的追求，人类社会活动中普遍存在的利益驱动现象。当然也反映了人们对于生存和发展的基本需求，以及社会经济发展的动力 。在社会主义价值观中，虽然强调集体利益和社会公平，但也不否认个人在合法合规的前提下追求正当利益的合理性。所谓“君子爱财，取之有道”，此之谓也。<br>《Game of Thrones》中有“Power resides where men believe it resides.”，翻译一下，就是“权力在于人心所向”。权力并不固定存在于某个位置或某个人，而是存在于人们对权力的共同信念和认可中。在《权力的游戏》这个虚构的世界中，这句话体现了权力的动态性和相对性。权力不是绝对的或固化的，而是由人们的信念、恐惧、尊重和服从所支撑。如果人们不再相信某个权力机构或个人拥有权力，那么这个权力就会消失。相反，如果人们普遍认可某个个体或组织的权威，那么这个个体或组织就会拥有权力。习近平总书记在党史学习教育动员大会上也指出：“历史充分证明，江山就是人民，人民就是江山，人心向背关系党的生死存亡。”或许，这才是真理。<br>想起了暑假里读到的米兰昆德拉的《不朽》，人为了在世界上留下痕迹、为了“不朽”而奔走着。“名”，既可以是人们追求的目标，也可以是人们被束缚的枷锁。一方面，它可以给予人一种超越死亡的幻觉，使人们相信自己可以通过名声在历史中永生；另一方面，名声也是一种虚荣，它可能导致个人的自我迷失和真实生活的丧失。但最重要的是，死后万事空与否谁能说清呢，如果死后万事皆空，那以“不朽“为目的苦苦追求在生前或许还有些用的“名“，就显得很可笑了。<br>“了却君王天下事，赢得生前身后名。”古人好像不少都追求气节、名声，所谓“留名青史“、“遗臭万年”、“后人自有评说“，对于那些为气节而死的行为，我向来是报以敬畏的态度，因为还不能完全理解；再者就是入朝为官，经世济民，所谓”万般皆下品，唯有读书高“，而寒窗苦读十载不过是为了进入仕途；至于钱，似乎总和俗挂钩，体面人是不好直言的。古代”四民“的等级制度，士人处在顶端，商人似乎为人所不齿，与今天似乎有很大的不同。<br>我以为，实践是检验真理的唯一标准，如果没追求并得到一样东西，总会有执念。至于得到之后是感慨不过如此、自嘲误入歧途，还是内心满足充盈又是另一说了。我们大多数人对钱、权、名没有这么大的执念，或许只是因为没得到，也就不会碰到考验与抉择了。就是说，或许我们没自己想象中的清心寡欲，只是碰巧没轮到我们罢了，因而“品庶每生“。<br>总之，原则之内，追求钱、权、名无可厚非，个人的选择罢了。对于人生的意义，众说纷纭，无所谓对错，但“有限的时间内尽可能的体验“或许能作为一个解。</p>\n</blockquote>\n<p>这两天状态都不太好，昨天下午、今天下午，心情都不太好，可以是身体不太舒服，加上快考试了心里没底有些焦虑，今天晚上种种原因吧，复习的不太顺利，但也算是开始了吧，明天要好好复习了<br>一个月，总有一两天状态欠佳，一直从容倒不切实际，睡了睡了</p>\n","categories":[],"tags":[{"name":"打卡","slug":"打卡","permalink":"http://example.com/tags/%E6%89%93%E5%8D%A1/"}]},{"title":"Test","date":"2024-05-26T09:10:46.000Z","path":"2024/05/26/Test/","text":"Hello","content":"<p>Hello</p>\n","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://example.com/tags/%E6%B5%8B%E8%AF%95/"}]},{"title":"看个晚会放松一下","date":"2024-05-24T16:00:00.000Z","path":"2024/05/25/看个晚会放松一下/","text":"时间有限，水一篇随笔，这两天睡得都挺晚的，这可不成。 这次是这个动漫社18年周年庆的晚会，感觉蛮不错的，会感觉说，活着真好，能体验很多没体验过的东西。 现场的氛围超顶，看着哥哥们这么crazy，果然我还不是一个合格的二次元，尤其是接触到之前不知道的东西。比如说 “宅舞” 和 “Wota艺”. 宅舞： ACGN文化有关的舞蹈活动，是一个仅在中国大陆地区使用的名词，，一般用来指代使用了与ACGN文化有关的音乐作为伴奏所编排的舞蹈作品或舞蹈活动。 Wota艺： 荧光棒舞蹈、观众应援方式。 放几张图 比较遗憾的是，正好旁边的操场有校园十佳歌手的决赛来着，也挺想看的，但是两个是同时举办的，最终还是选择去看晚会了，等到晚会临近结束的时候，十佳歌手的比赛也接近尾声了。而且去的比较晚，也没混上晚会的票，没留个纪念品，也没参与抽奖，不过遗憾可能印象更深一些","content":"<p>时间有限，水一篇随笔，这两天睡得都挺晚的，这可不成。</p>\n<p>这次是这个动漫社18年周年庆的晚会，感觉蛮不错的，会感觉说，活着真好，能体验很多没体验过的东西。</p>\n<p>现场的氛围超顶，看着哥哥们这么crazy，果然我还不是一个合格的二次元，尤其是接触到之前不知道的东西。比如说 <strong>“宅舞”</strong> 和 <strong>“Wota艺”</strong>.</p>\n<blockquote>\n<p><strong>宅舞：</strong> ACGN文化有关的舞蹈活动，是一个仅在中国大陆地区使用的名词，，一般用来指代使用了与ACGN文化有关的音乐作为伴奏所编排的舞蹈作品或舞蹈活动。</p>\n<p><strong>Wota艺：</strong> 荧光棒舞蹈、观众应援方式。</p>\n</blockquote>\n<p>放几张图<br><img src=\"/../images/B6995FC7A34AD001FD093FF7C23CB163.jpg\"><br><img src=\"/../images/BC398C21FA20F2B4FA8DB04DED40E853.jpg\"><br><img src=\"/../images/B0E4F5FE88445377A1517D71436D57CB.jpg\"></p>\n<p>比较遗憾的是，正好旁边的操场有校园十佳歌手的决赛来着，也挺想看的，但是两个是同时举办的，最终还是选择去看晚会了，等到晚会临近结束的时候，十佳歌手的比赛也接近尾声了。而且去的比较晚，也没混上晚会的票，没留个纪念品，也没参与抽奖，不过遗憾可能印象更深一些<br><img src=\"/../images/6C9E10EEDA8F3D633B524EF77DFFA71E.jpg\"></p>\n","categories":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[]},{"title":"Hexo Blog Update Log","date":"2024-05-24T14:55:44.000Z","path":"2024/05/24/Hexo-Blog-Update-Log/","text":"5.23 创建blog并使用 Yilia 主题，可以通过 https://aj3230.github.io/ 实现远端访问访问 5.24 在 blog\\source 目录下创建了 images 文件夹，用于存储markdown里插入的图片(通过相对路径实现) 安装 hexo-auto-excerpt 插件，为 Yilia 主题添加自动摘要功能 创建了 “Hexo-Blog-Updata-log” ，以记录博客更新日志 5.25 更新了 “HTTP协议“博客 安装 Hexo 的一个插件 hexo-generator-json-content，并将其添加到博客项目的依赖列表中.并在 Hexo 的配置文件 _config.yml 中添加一个 jsonContent 部分配置该插件，以在博客中生成 JSON 内容，实现 标签、日期、索引 等功能。 在 Yilia 的配置文件里 _config.yml 更改了 “随笔” 链接的指向位置，实现快速跳转到所有”随笔”标签的博客。 创建了 “看个晚会放松一下” 随笔 5.26 更新了 “HTTP协议“ 博客 重命名 blog\\source\\images 中的图片，便于管理 更新了博客的 头像 “友情链接” 子导航链接 “关于我” 引入 Gitment，实现 评论 功能， 出现bug，取消了评论功能 上传了 Markdown语法、 Windows指令 两篇博客 规范博客的 title date tags 格式 5.27 更新了 “HTTP协议“ 博客 创建 “好忙呀“ 随笔 添加了 “更新日志“ 标签 (待完善 应该直接跳转进去) 5.28 更新了 “HTTP协议“ 博客 创建 “第1周“ 打卡 把 5.27创建的 “好忙呀“ 随笔 合并到 “第1周“ 打卡 5.29 更新 “HTTP协议“ 博客 更新 “第1周“ 打卡 5.30 更新 “第1周“ 打卡 6.3 创建 “第2周“ 打卡","content":"<blockquote>\n<h2 id=\"5-23\"><a href=\"#5-23\" class=\"headerlink\" title=\"5.23\"></a>5.23</h2><ol>\n<li>创建blog并使用 <strong>Yilia</strong> 主题，可以通过 <a href=\"https://aj3230.github.io/\">https://aj3230.github.io/</a> 实现远端访问访问</li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-24\"><a href=\"#5-24\" class=\"headerlink\" title=\"5.24\"></a>5.24</h2><ol>\n<li>在 blog\\source 目录下创建了 <strong>images</strong> 文件夹，用于存储markdown里插入的<strong>图片</strong>(通过相对路径实现)</li>\n<li>安装 <strong>hexo-auto-excerpt</strong> 插件，为 Yilia 主题添加<strong>自动摘要</strong>功能</li>\n<li>创建了 <strong>“Hexo-Blog-Updata-log”</strong> ，以记录<strong>博客更新日志</strong></li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-25\"><a href=\"#5-25\" class=\"headerlink\" title=\"5.25\"></a>5.25</h2><ol>\n<li>更新了 “<strong>HTTP协议</strong>“博客</li>\n<li>安装 Hexo 的一个插件 <strong>hexo-generator-json-content</strong>，并将其添加到博客项目的依赖列表中.并在 Hexo 的配置文件 <strong>_config.yml</strong> 中添加一个 <strong>jsonContent</strong> 部分配置该插件，以在博客中生成 JSON 内容，实现 <strong>标签、日期、索引</strong> 等功能。</li>\n<li>在 <strong>Yilia</strong> 的配置文件里 <strong>_config.yml</strong> 更改了 <strong>“随笔”</strong> 链接的指向位置，实现快速跳转到所有”随笔”标签的博客。</li>\n<li>创建了 <strong>“看个晚会放松一下”</strong> <strong>随笔</strong></li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-26\"><a href=\"#5-26\" class=\"headerlink\" title=\"5.26\"></a>5.26</h2><ol>\n<li>更新了 “<strong>HTTP协议</strong>“ 博客</li>\n<li>重命名 <strong>blog\\source\\images</strong> 中的图片，便于管理</li>\n<li>更新了博客的 <strong>头像</strong> <strong>“友情链接”</strong> <strong>子导航链接</strong> <strong>“关于我”</strong></li>\n<li>引入 <strong>Gitment</strong>，实现 <strong>评论</strong> 功能， 出现bug，取消了评论功能</li>\n<li>上传了 <strong>Markdown语法、</strong> <strong>Windows指令</strong> 两篇博客</li>\n<li>规范博客的 <strong>title</strong> <strong>date</strong> <strong>tags</strong> 格式</li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-27\"><a href=\"#5-27\" class=\"headerlink\" title=\"5.27\"></a>5.27</h2><ol>\n<li>更新了 “<strong>HTTP协议</strong>“ 博客</li>\n<li>创建 “<strong>好忙呀</strong>“ 随笔</li>\n<li>添加了 “<strong>更新日志</strong>“ 标签 (待完善 应该直接跳转进去)</li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-28\"><a href=\"#5-28\" class=\"headerlink\" title=\"5.28\"></a>5.28</h2><ol>\n<li>更新了 “<strong>HTTP协议</strong>“ 博客</li>\n<li>创建 “<strong>第1周</strong>“ 打卡</li>\n<li>把 5.27创建的 “<strong>好忙呀</strong>“ 随笔 合并到 “<strong>第1周</strong>“ 打卡</li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-29\"><a href=\"#5-29\" class=\"headerlink\" title=\"5.29\"></a>5.29</h2><ol>\n<li>更新 “<strong>HTTP协议</strong>“ 博客</li>\n<li>更新 “<strong>第1周</strong>“ 打卡</li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"5-30\"><a href=\"#5-30\" class=\"headerlink\" title=\"5.30\"></a>5.30</h2><ol>\n<li>更新 “<strong>第1周</strong>“ 打卡</li>\n</ol>\n</blockquote>\n<blockquote>\n<h2 id=\"6-3\"><a href=\"#6-3\" class=\"headerlink\" title=\"6.3\"></a>6.3</h2><ol>\n<li>创建 “<strong>第2周</strong>“ 打卡</li>\n</ol>\n</blockquote>\n","categories":[{"name":"更新日志","slug":"更新日志","permalink":"http://example.com/categories/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"}],"tags":[]},{"title":"HTTP协议","date":"2024-05-23T13:18:34.000Z","path":"2024/05/23/HTTP-protocol/","text":"参考:https://www.bilibili.com/video/BV1js411g7Fw 5.23一、前言 重要性 webservice &#x3D; HTTP协议 + XML Rest &#x3D; HTTP协议 + ison 各种API一般也是用 HTTP协议 + XML&#x2F;json 来实现的 此外，做采集、小偷站，也需要对HTP协议有一定的了解；也有助于学习Ajax 二、索引 原理 形象理解原理 请求信息和响应信息的格式 请求方法 状态码 实战 PHP + socket编程 发送http请求 PHP 批量发帖 HTTP协议 防盗 优化 HTTP协议 与 缓存控制 HTTP协议 与 COOKIE 持久链接 与 反向Ajax 5.24 repostiry 仓库 三、原理 协议： 一式双份&#x2F;多份，双方&#x2F;多方都遵从的一个规范。 e.g. ftp http pop tcp&#x2F;ip HTTP协议： 客户端按照一定规则向服务器发送请求、索要数据，服务器按照一定规则响应请求、返回数据 5.25 config (计算机系统)配置 四、 HTTP请求信息和响应信息的格式 1)请求信息格式 请求行 (格式：请求方法 路径 协议) 请求方法 GET POST HEAD PUT DELETE TRACE OPTIONS 请求路径：URL的一部分 所用协议：目前一般是 “HTTP&#x2F;1.1“,0.9和1.0基本上已经不用 请求头信息 (格式：key value) 头信息结束后，和主体信息之间要空一行 请求主体信息 (可选) (发送内容) e.g.POST &#x2F;03.php HTTP&#x2F;1.1Host: localhostConten-type: application&#x2F;x-www-form-urlencodeContent-length: 24空行username&#x3D;zhangsan&amp;age&#x3D;18 &nbsp; 2)响应信息格式 响应行 (格式：请求方法 状态码 状态文字) 状态码： 反应服务器的响应情况 (e.g. 200 OK 404 NOT FOUND ) 状态码 定义 说明 1XX 信息 接收到请求，继续处理(HTTP预留待拓展) 2XX 成功 操作成功地收到，理解和接受 3XX 重定向 为了完成请求，必须采取进一步措施 4XX 客户端错误 请求的语法有错误或不能完全被满足。 5XX 服务器错误 服务器无法完成明显有效的请求。 状态文字: 描述状态码，便于人观察 响应头信息 (格式：key value) 头信息结束后，和主体信息之间要空一行 请求主体信息 (可选) 请求主体信息 (可选) (发送内容) e.g.HTTP&#x2F;1.1 OK 200Content-tyoe: text&#x2F;htmlContent-length: 5空行Hello&nbsp; 实操：(一) 前置工作 安装HTTP服务器 IIS (Internet Information Services) Windows的内置Web服务器 控制面板——程序——程序和功能——打开或关闭Windows功能——勾选”Internet Information Services“ 在windows操作系统上使用telnet指令 控制面板——程序——程序和功能——打开或关闭Windows功能——勾选”telnet client“ 搭建平台，在浏览器中实现运行php代码 操作步骤 到 phpStudy官网 下载 phpStudy 安装路径不能包含”中文”或”空格”，否则会报错 配置Apache环境 “启动” Apache2.4.39，点击”配置”，可以看到网站目录”E:&#x2F;phpstudy_pro&#x2F;WWW” 把要浏览的.php文件放在www目录下面 浏览器输入访问路径：”http://localhost/文件路径“ 就可在浏览器上打开、运行php文件 参考 https://blog.csdn.net/qq_44381873/article/details/104761158 &nbsp; (二) 请求 测试 HTTP 协议 打开命令行 Win + R ——&gt; cmd + ENTER 输入ipconfig查看IP地址 IPV4: xxx.xxx.xxx.xxx 与指定 IP 地址的端口 80 建立一个 telnet 连接 (telnet 是一种网络协议，它提供了一种在两台计算机之间进行交互式文本通信的方法。使用 telnet 命令加上一个 IP 地址和端口号，可以尝试与目标 IP 地址的指定端口建立文本通信连接。端口号 80 是互联网上用于未加密的 HTTP（超文本传输协议）通信的标准端口。HTTP 是网页传输的基础协&gt;议，所以这个操作通常用于测试网络上的 HTTP 服务器是否可达。)telnet IP地址 80 + ENTER (80为默认情况下HTTP指定端口) 打开回显，使得能看到输入的东西，便于调试CTRL + ] + ENTER &nbsp; (1)GET方法请求 GET &#x2F;01.php HTTP&#x2F;1.1Host: localhost (2)POST方法请求 POST &#x2F;02.php HTTP&#x2F;1.1Host: localhostContent-type: application&#x2F;x-www-form-urlencodedContent-length: 23 name&#x3D;John&amp;age&#x3D;30 5.26(3)HEAD方法请求 功能：与GET方法基本一致，只是不返回内容。例如，只是想确认一个内容(e.g.照片)是否还正常存在，不需要返回照片内容。 GET &#x2F;01.php HTTP&#x2F;1.1Host: localhost (4)注： 这些方法虽然是HTTP协议规定的，但 WEB SERVER 未必全部允许或支持，一般前三个，即 GET POST HEAD 都支持。 telnet news.163.com 80TRACE &#x2F; HTTP&#x2F;1.1Host: news.163.com (5)OPTIONS方法 功能：返回服务器支持的请求方法 OPTIONS &#x2F; HTTP&#x2F;1.1Host: localhost &nbsp; 常用状态码(及状态文字) 200： 服务器成功返回网页301&#x2F;302： 永久&#x2F;临时重定向 分类 问题 描述：一篇新闻，对于GET请求，重定向影响不大，能看到原来的内容即可。但对于POST请求，可能造成数据丢失。 解决： 307： 重定向中保护原有的请求数据 服务器上的资源暂时移动到了另一个URI，但是客户端应该继续使用原来的请求方法来访问新的URI。这个状态码与301和302重定向类似，但主要区别在于它不会改变客户端的请求方法（GET、POST等）。换言之，301和302重定向会改变客户端的请求方法。 304 NOT MODIFIED： 未修改 例如一张图片(一般长期不变)：客户端第一次请求服务器获得这个图片后，之后的每次请求，服务器会告诉客户端我有这张图片，并告诉服务器自己对该图片的时间编号(ETag)，让服务器判断过期没，如果过期了，服务器再重新返回新的图片，否则客户端直接取缓存，节省连接，实现优化。 失败状态码404 NOT FOUND： 请求的网页不存在 503： 服务器暂时不可用500： 服务器内部问题 5.27 PHP 是一种服务器端脚本语言，用于创建动态网页和应用程序。PHP文件通常包含HTML和PHP代码，可以由服务器解释并生成动态内容。PHP文件通常具有.php扩展名. 五、实战(一) PHP + socket编码 发送 HTTP请求 要求：模拟 下载、注册、登陆、批量发帖 socket操作远程文件和读写本地的文件原理类型，可以理解为，本地文件通过硬件传输，而远程文件通过网线传输。 5.28(1)socket编码发送GET请求 PHP 中的 $ 符号用于声明变量，但变量的数据类型是在赋值时动态确定的 $this 是一个特殊变量，它代表当前类的实例。当您在类的方法内部使用 $this-&gt; 时，它允许您访问类的私有（private）和受保护（protected）属性以及公共（public）属性 在 PHP 中，接口（Interface）是一种特殊的类，它定义了一组方法签名，但不包含这些方法的具体实现。接口类似于 C++ 中的抽象基类（Abstract Base Class），它们都用于定义一组规范，使得实现这些接口的类必须提供这些方法的具体实现。 在 PHP 中，类的构造函数通常以 __construct 命名，这是一个约定俗成的命名规则，而不是一个严格的语法规则 array() 是一个函数，它用于创建一个数组。数组是一种数据结构，可以存储一系列键值对 fsockopen() 函数。用于创建一个网络套接字(socket)，并通过它与远程服务器进行通信 print_r 是一个函数，用于以易于理解的方式打印关于变量结构的信息。这个函数主要用于调试目的，它输出变量的类型和值，并且如果变量是数组或对象，还会输出它们的键和属性 5.29 换行： Linux ‘\\n’ macOS ‘\\r’ Windows ‘\\r\\n&#39; HTTP协议 ‘\\r\\n’ Carriage Return（CR）回车 Line Feed（LF）换行 在PHP中，fsockopen函数用于打开一个网络连接。这个函数允许你通过TCP或UDP协议与远程服务器进行通信 基本语法： resource fsockopen ( string $hostname , int$port [, int $errno [, string$errstr [, float $timeout ]]]] ) hostname：要连接的服务器的域名或IP地址。 port：要连接的服务器的端口号。 errno：如果发生错误，将存储错误编号。 errstr：如果发生错误，将存储错误描述。 timeout：设置超时时间（以秒为单位）。如果设置为0，则函数会立即返回，不管连接是否成功。 在PHP中，**”.&#x3D;”**（或 **”. +&#x3D;”**）是用于字符串的扩展赋值运算符。这个运算符用于将一个字符串追加到另一个字符串的末尾 &nbsp;&nbsp;代码： 定义了一个名为Http的类，该类实现了Proto接口。创建了一个Http对象，并调用其get方法来获取指定的URL的响应内容，并将其输出 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129&lt;?php// (一) 接口声明// http 请求类的接口 包含四个方法 interface Proto&#123; function conn($url); // 连接 URL function get(); // 发送 GET 查询 function post(); // 发送 POST 查询 function close(); // 关闭连接&#125;// -----------------------------------//(二) 类实现 Http类 实现 Proto接口class Http implements Proto&#123; const CRLF = &quot;\\r\\n&quot;; // Carriage return Line feed 回车换行 protected $errno = -1; // 如果发生错误，将存储错误编号 protected $errstr = &#x27;&#x27;; // 如果发生错误，将存储错误描述 protected $response = &#x27;&#x27;; // 响应内容 protected $url= null; // URL 解析后的信息 protected $version = &#x27;HTTP/1.1&#x27;; // 协议版本 protected $fh = null; // 文件句柄(file handle)，用于与服务器进行通信 protected $line = array(); // 请求行 protected $header = array(); // 头信息 protected $body = array(); // 主体信息 // 公共的构造函数——初始化连接 public function __construct($url)&#123; $this-&gt;conn($url); $this-&gt;setHeader(&#x27;Host: &#x27; . $this-&gt;url[&#x27;host&#x27;]); // 请求头部信息都差不多 直接写在构造函数里 &#125; // 此方法负责写请求行 protected function setLine($method)&#123; $this-&gt;line[0] = $method . &#x27; &#x27; . $this-&gt;url[&#x27;path&#x27;] . &#x27; &#x27; . $this-&gt;version; &#125; // 此方法负责写头信息 protected function setHeader($headerLine)&#123; $this-&gt;header[] = $headerLine; &#125; // 此方法负责写主体信息 protected function setBody()&#123; &#125; // 连接URL 建立与服务器的连接 public function conn($url)&#123; $this-&gt;url = parse_url($url); // 解析URL // 设置默认端口 if (!isset($this-&gt;url[&#x27;port&#x27;])) &#123; // 如果没分析出端口 $this-&gt;url[&#x27;port&#x27;] = 80; // HTTP 请求的默认端口号 &#125; // 建立网络连接 $this-&gt;fh = fsockopen($this-&gt;url[&#x27;host&#x27;], $this-&gt;url[&#x27;port&#x27;],$this-&gt;errno, $whis-&gt;errstr, 30); // 如果连接成功，返回一个文件句柄（file handle），这个句柄可以用来发送和接收数据 // 如果连接失败 if (!$this-&gt;fh) &#123; die(&quot;无法连接到服务器: $errstr ($errno)&quot;); &#125; &#125; // 构造 GET 请求的数据 public function get()&#123; $this-&gt;setLine(&#x27;GET&#x27;); // 设置请求行 (请求头信息已经在构造函数中设置) $this-&gt;request(); return $this-&gt;response; &#125; // 构造 POST 请求的数据 public function post()&#123; &#125; // 请求 public function request()&#123; // 把 请求行、头信息、实体信息 合并到一个数组里，便于拼接 $req = array_merge($this-&gt;line,$this-&gt;header,array(&#x27;&#x27;),$this-&gt;body,array(&#x27;&#x27;)); // print_r($req); $req = implode(self::CRLF, $req); // 拼接 // echo $req; fwrite($this-&gt;fh,$req); while (!feof($this-&gt;fh)) &#123; $this-&gt;response .= fread($this-&gt;fh, 1024); &#125; $this-&gt;close(); // 关闭连接 // return $this-&gt;response; &#125; // 关闭连接 public function close()&#123; &#125; &#125;// -----------------------------------// (三) 脚本执行$url = &#x27;http://hcl.baidu.com/&#x27;;$http = new Http($url); // 创建了应该http对象// print_r($http); // 打印对象的属性 以验证请求是否成功echo $http-&gt;get();?&gt; (2)socket编码发送POST请求在命令行中使用 telnet 命令连接到 http://mc.iproute.cn:16849/index.php telnet mc.iproute.cn 16849 POST &#x2F;index.php HTTP&#x2F;1.1 Host: localhost Content-type: application&#x2F;x-www-form-urlencodedContent-length: 71空行datatable1_length&#x3D;10&amp;username&#x3D;aj&amp;content&#x3D;aaaa&amp;submit&#x3D;%E6%8F%90%E4%BA%A4 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148&lt;?php// (一) 接口声明// http 请求类的接口 包含四个方法 interface Proto&#123; function conn($url); // 连接 URL function get(); // 发送 GET 查询 function post(); // 发送 POST 查询 function close(); // 关闭连接&#125;// -----------------------------------//(二) 类实现 Http类 实现 Proto接口class Http implements Proto&#123; const CRLF = &quot;\\r\\n&quot;; // Carriage return Line feed 回车换行 protected $errno = -1; // 如果发生错误，将存储错误编号 protected $errstr = &#x27;&#x27;; // 如果发生错误，将存储错误描述 protected $response = &#x27;&#x27;; // 响应内容 protected $url= null; // URL 解析后的信息 protected $version = &#x27;HTTP/1.1&#x27;; // 协议版本 protected $fh = null; // 文件句柄(file handle)，用于与服务器进行通信 protected $line = array(); // 请求行 protected $header = array(); // 头信息 protected $body = array(); // 主体信息 // 公共的构造函数——初始化连接 public function __construct($url)&#123; $this-&gt;conn($url); $this-&gt;setHeader(&#x27;Host: &#x27; . $this-&gt;url[&#x27;host&#x27;]); // 请求头部信息都差不多 直接写在构造函数里 &#125; // 此方法负责写请求行 protected function setLine($method)&#123; $this-&gt;line[0] = $method . &#x27; &#x27; . $this-&gt;url[&#x27;path&#x27;] . &#x27; &#x27; . $this-&gt;version; &#125; // 此方法负责写头信息 protected function setHeader($headerLine)&#123; $this-&gt;header[] = $headerLine; &#125; // 此方法负责写主体信息 protected function setBody($body)&#123; $this-&gt;body[] = http_build_query($body); &#125; // 连接URL 建立与服务器的连接 public function conn($url)&#123; $this-&gt;url = parse_url($url); // 解析URL // 设置默认端口 if (!isset($this-&gt;url[&#x27;port&#x27;])) &#123; // 如果没分析出端口 $this-&gt;url[&#x27;port&#x27;] = 80; // HTTP 请求的默认端口号 &#125; // 建立网络连接 $this-&gt;fh = fsockopen($this-&gt;url[&#x27;host&#x27;], $this-&gt;url[&#x27;port&#x27;],$this-&gt;errno, $whis-&gt;errstr, 30); // 如果连接成功，返回一个文件句柄（file handle），这个句柄可以用来发送和接收数据 // 如果连接失败 if (!$this-&gt;fh) &#123; die(&quot;无法连接到服务器: $errstr ($errno)&quot;); &#125; &#125; // 构造 GET 请求的数据 public function get()&#123; $this-&gt;setLine(&#x27;GET&#x27;); // 设置请求行 (请求头信息已经在构造函数中设置) $this-&gt;request(); return $this-&gt;response; &#125; // 构造 POST 请求的数据 public function post($body = array())&#123; $this-&gt;setLine(&#x27;POST&#x27;); // 设置请求行 (请求头信息已经在构造函数中设置) // 设置 Content-type $this-&gt;setHeader(&#x27;Content-type: application/x-www-form-urlencoded&#x27;); // 先设置主体信息 (与GET不同) $this-&gt;setBody($body); // 然后计算 Content-length $this-&gt;setHeader(&#x27;Content-length: &#x27; . strlen($this-&gt;body[0])); $this-&gt;request(); &#125; // 请求 public function request()&#123; // 把 请求行、头信息、实体信息 合并到一个数组里，便于拼接 $req = array_merge($this-&gt;line,$this-&gt;header,array(&#x27;&#x27;), $this-&gt;body, array(&#x27;&#x27;)); // print_r($req); $req = implode(self::CRLF, $req); // 拼接 // echo $req; exit; // 调试是否拼接成功 fwrite($this-&gt;fh,$req); while (!feof($this-&gt;fh)) &#123; $this-&gt;response .= fread($this-&gt;fh, 1024); &#125; $this-&gt;close(); // 关闭连接 &#125; // 关闭连接 public function close()&#123; fclose($this-&gt;fh); &#125; &#125;// -----------------------------------// (三) 脚本执行set_time_limit(0);$url = &#x27;http://mc.iproute.cn:16849/index.php&#x27;;for($i=1; $i&lt;10; $i++)&#123; // 随机 $str = str_shuffle(&#x27;abcdefghijklmnopqrst0123456789&#x27;); $username = substr($str, 0, 5); $content = substr($str, 6, 8); $http = new Http($url); // 创建了应该http对象 $http-&gt;post(array(&#x27;datatable1_length&#x27;=&gt;strlen($username . $content ),&#x27;username&#x27;=&gt;$username,&#x27;content&#x27;=&gt;$content ,&#x27;submit&#x27;=&gt;&#x27;%E6%8F%90%E4%BA%A4&#x27;)); echo $username, &#x27;&lt;br /&gt;&#x27;, $content; usleep(2000);&#125;?&gt;","content":"<hr>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考:\"></a>参考:</h3><p><a href=\"https://www.bilibili.com/video/BV1js411g7Fw\">https://www.bilibili.com/video/BV1js411g7Fw</a></p>\n<hr>\n<h1 id=\"5-23\"><a href=\"#5-23\" class=\"headerlink\" title=\"5.23\"></a>5.23</h1><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><blockquote>\n<ul>\n<li><strong>重要性</strong><ul>\n<li>webservice &#x3D; HTTP协议 + XML</li>\n<li>Rest &#x3D; HTTP协议 + ison</li>\n<li>各种API一般也是用 HTTP协议 + XML&#x2F;json 来实现的</li>\n<li>此外，做采集、小偷站，也需要对HTP协议有一定的了解；也有助于学习Ajax</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"二、索引\"><a href=\"#二、索引\" class=\"headerlink\" title=\"二、索引\"></a>二、索引</h2><blockquote>\n<ul>\n<li><strong>原理</strong><ul>\n<li>形象理解原理</li>\n<li>请求信息和响应信息的格式</li>\n<li>请求方法 状态码</li>\n</ul>\n</li>\n<li><strong>实战</strong><ul>\n<li>PHP + socket编程 发送http请求</li>\n<li>PHP 批量发帖</li>\n<li>HTTP协议 防盗</li>\n</ul>\n</li>\n<li><strong>优化</strong><ul>\n<li>HTTP协议 与 缓存控制</li>\n<li>HTTP协议 与 COOKIE</li>\n<li>持久链接 与 反向Ajax</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"5-24\"><a href=\"#5-24\" class=\"headerlink\" title=\"5.24\"></a>5.24</h1><blockquote>\n<ul>\n<li><em><strong>repostiry</strong></em> 仓库</li>\n</ul>\n</blockquote>\n<h2 id=\"三、原理\"><a href=\"#三、原理\" class=\"headerlink\" title=\"三、原理\"></a>三、原理</h2><blockquote>\n<ul>\n<li><strong>协议：</strong> 一式双份&#x2F;多份，双方&#x2F;多方都遵从的一个规范。<ul>\n<li><strong>e.g.</strong>   ftp http pop tcp&#x2F;ip</li>\n</ul>\n</li>\n<li><strong>HTTP协议：</strong> 客户端按照一定规则向服务器发送请求、索要数据，服务器按照一定规则响应请求、返回数据<br><img src=\"/../images/HTTP-workflow.png\" alt=\"HTTP工作流程\"></li>\n</ul>\n</blockquote>\n<hr>\n<h1 id=\"5-25\"><a href=\"#5-25\" class=\"headerlink\" title=\"5.25\"></a>5.25</h1><blockquote>\n<p><strong>config</strong> (计算机系统)配置</p>\n</blockquote>\n<h2 id=\"四、-HTTP请求信息和响应信息的格式\"><a href=\"#四、-HTTP请求信息和响应信息的格式\" class=\"headerlink\" title=\"四、 HTTP请求信息和响应信息的格式\"></a>四、 <em><strong>HTTP请求信息和响应信息的格式</strong></em></h2><blockquote>\n<h3 id=\"1-请求信息格式\"><a href=\"#1-请求信息格式\" class=\"headerlink\" title=\"1)请求信息格式\"></a>1)请求信息格式</h3><ul>\n<li><strong>请求行  (格式：请求方法 路径 协议)</strong><ul>\n<li><p>请求方法 </p>\n<ul>\n<li>GET</li>\n<li>POST</li>\n<li>HEAD</li>\n<li>PUT</li>\n<li>DELETE</li>\n<li>TRACE</li>\n<li>OPTIONS</li>\n</ul>\n</li>\n<li><p>请求路径：URL的一部分</p>\n</li>\n<li><p>所用协议：目前一般是 “<strong>HTTP&#x2F;1.1</strong>“,0.9和1.0基本上已经不用</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<ul>\n<li><strong>请求头信息 (格式：key value)</strong></li>\n</ul>\n<p><strong>头信息结束后，和主体信息之间要空一行</strong></p>\n<ul>\n<li><strong>请求主体信息 (可选) (发送内容)</strong><blockquote>\n<ul>\n<li>e.g.<br><strong>POST &#x2F;03.php HTTP&#x2F;1.1</strong><br><strong>Host: localhost</strong><br><strong>Conten-type: application&#x2F;x-www-form-urlencode</strong><br><strong>Content-length: 24</strong><br>空行<br><strong>username&#x3D;zhangsan&amp;age&#x3D;18</strong><br><img src=\"/../images/Example-GET-Method.png\" alt=\"e.g.\"></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>&nbsp;</p>\n</blockquote>\n<blockquote>\n<h3 id=\"2-响应信息格式\"><a href=\"#2-响应信息格式\" class=\"headerlink\" title=\"2)响应信息格式\"></a>2)响应信息格式</h3><ul>\n<li><strong>响应行  (格式：请求方法 状态码 状态文字)</strong><ul>\n<li><p><strong>状态码：</strong> 反应服务器的响应情况 (e.g. <strong>200 OK</strong> <strong>404 NOT FOUND</strong> )</p>\n<blockquote>\n<table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>定义</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1XX</td>\n<td>信息</td>\n<td>接收到请求，继续处理(HTTP预留待拓展)</td>\n</tr>\n<tr>\n<td>2XX</td>\n<td>成功</td>\n<td>操作成功地收到，理解和接受</td>\n</tr>\n<tr>\n<td>3XX</td>\n<td>重定向</td>\n<td>为了完成请求，必须采取进一步措施</td>\n</tr>\n<tr>\n<td>4XX</td>\n<td>客户端错误</td>\n<td>请求的语法有错误或不能完全被满足。</td>\n</tr>\n<tr>\n<td>5XX</td>\n<td>服务器错误</td>\n<td>服务器无法完成明显有效的请求。</td>\n</tr>\n</tbody></table>\n</blockquote>\n</li>\n<li><p><strong>状态文字:</strong> 描述状态码，便于人观察</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n</blockquote>\n<ul>\n<li><strong>响应头信息 (格式：key value)</strong></li>\n</ul>\n<p><strong>头信息结束后，和主体信息之间要空一行</strong></p>\n<ul>\n<li><p><strong>请求主体信息 (可选)</strong></p>\n</li>\n<li><p><strong>请求主体信息 (可选) (发送内容)</strong></p>\n<blockquote>\n<ul>\n<li>e.g.<br><strong>HTTP&#x2F;1.1 OK 200</strong><br><strong>Content-tyoe: text&#x2F;html</strong><br><strong>Content-length: 5</strong><br>空行<br><strong>Hello</strong><br><img src=\"/../images/Example-POST-Method.png\" alt=\"e.g.\"><br>&nbsp;</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"实操：\"><a href=\"#实操：\" class=\"headerlink\" title=\"实操：\"></a>实操：</h3><h4 id=\"一-前置工作\"><a href=\"#一-前置工作\" class=\"headerlink\" title=\"(一) 前置工作\"></a>(一) 前置工作</h4><blockquote>\n<p><em><strong>安装HTTP服务器</strong></em></p>\n<ul>\n<li><strong>IIS</strong> (Internet Information Services) Windows的内置Web服务器<ul>\n<li><strong>控制面板</strong>——<strong>程序</strong>——<strong>程序和功能</strong>——<strong>打开或关闭Windows功能</strong>——勾选”<strong>Internet Information Services</strong>“</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em><strong>在windows操作系统上使用telnet指令</strong></em></p>\n<ul>\n<li><strong>控制面板</strong>——<strong>程序</strong>——<strong>程序和功能</strong>——<strong>打开或关闭Windows功能</strong>——勾选”<strong>telnet client</strong>“</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em><strong>搭建平台，在浏览器中实现运行php代码</strong></em></p>\n<ul>\n<li><strong>操作步骤</strong></li>\n</ul>\n<ol>\n<li>到 <a href=\"https://www.xp.cn/download.html\" title=\"phpStudy官网\">phpStudy官网</a> 下载 <strong>phpStudy</strong><br>  安装路径不能包含”中文”或”空格”，否则会报错</li>\n<li>配置Apache环境<br>  “启动” <strong>Apache2.4.39</strong>，点击”配置”，可以看到网站目录”E:&#x2F;phpstudy_pro&#x2F;WWW”</li>\n<li>把要浏览的.php文件放在www目录下面</li>\n<li>浏览器输入访问路径：”<a href=\"http://localhost/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84\">http://localhost/文件路径</a>“ 就可在浏览器上打开、运行php文件</li>\n</ol>\n<ul>\n<li><strong>参考</strong><ul>\n<li><a href=\"https://blog.csdn.net/qq_44381873/article/details/104761158\">https://blog.csdn.net/qq_44381873/article/details/104761158</a></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&nbsp;</p>\n<h4 id=\"二-请求\"><a href=\"#二-请求\" class=\"headerlink\" title=\"(二) 请求\"></a>(二) 请求</h4><blockquote>\n<p>测试 HTTP 协议</p>\n<ol>\n<li>打开命令行<br>  <strong>Win</strong> + <strong>R</strong> ——&gt; <strong>cmd</strong> + <strong>ENTER</strong> </li>\n<li>输入<strong>ipconfig</strong>查看IP地址<br>  <strong>IPV4: xxx.xxx.xxx.xxx</strong></li>\n<li>与指定 IP 地址的端口 80 建立一个 telnet 连接<br>  (telnet 是一种网络协议，它提供了一种在两台计算机之间进行交互式文本通信的方法。使用 telnet 命令加上一个 IP 地址和端口号，可以尝试与目标 IP 地址的指定端口建立文本通信连接。端口号 80 是互联网上用于未加密的 HTTP（超文本传输协议）通信的标准端口。HTTP 是网页传输的基础协&gt;议，所以这个操作通常用于测试网络上的 HTTP 服务器是否可达。)<br><strong>telnet</strong> <strong>IP地址</strong> <strong>80</strong> + <strong>ENTER</strong>  (80为默认情况下HTTP指定端口)</li>\n<li>打开回显，使得能看到输入的东西，便于调试<br><strong>CTRL</strong> + <strong>]</strong> + <strong>ENTER</strong></li>\n</ol>\n</blockquote>\n<p>&nbsp;</p>\n<blockquote>\n<p><em><strong>(1)GET方法请求</strong></em></p>\n<blockquote>\n<p><strong>GET &#x2F;01.php HTTP&#x2F;1.1</strong><br><strong>Host: localhost</strong><br> <img src=\"/../images/GET-Method.png\" alt=\"GET方法做HTTP请求\"></p>\n</blockquote>\n<p><em><strong>(2)POST方法请求</strong></em></p>\n<blockquote>\n<p><strong>POST &#x2F;02.php HTTP&#x2F;1.1</strong><br><strong>Host: localhost</strong><br><strong>Content-type: application&#x2F;x-www-form-urlencoded</strong><br><strong>Content-length: 23</strong></p>\n<p><strong>name&#x3D;John&amp;age&#x3D;30</strong></p>\n<p> <img src=\"/../images/Head-Method.png\" alt=\"POST方法做HTTP请求\"></p>\n</blockquote>\n<h1 id=\"5-26\"><a href=\"#5-26\" class=\"headerlink\" title=\"5.26\"></a>5.26</h1><p><em><strong>(3)HEAD方法请求</strong></em></p>\n<blockquote>\n<p>功能：与GET方法基本一致，只是不返回内容。例如，只是想确认一个内容(e.g.照片)是否还正常存在，不需要返回照片内容。</p>\n<p><strong>GET &#x2F;01.php HTTP&#x2F;1.1</strong><br><strong>Host: localhost</strong><br> <img src=\"/../images/Head-Method.png\" alt=\"HEAD方法做HTTP请求\"></p>\n</blockquote>\n<p><em><strong>(4)注：</strong></em> </p>\n<blockquote>\n<p>这些方法虽然是HTTP协议规定的，但 <strong>WEB</strong> <strong>SERVER</strong> 未必全部允许或支持，一般前三个，即 <strong>GET</strong> <strong>POST</strong> <strong>HEAD</strong> 都支持。</p>\n<p><strong>telnet news.163.com 80</strong><br><strong>TRACE &#x2F; HTTP&#x2F;1.1</strong><br><strong>Host: news.163.com</strong></p>\n<p> <img src=\"/../images/405-Methon-Not-Allowed.png\" alt=\"不支持该方法\"></p>\n</blockquote>\n<p><em><strong>(5)OPTIONS方法</strong></em> </p>\n<blockquote>\n<p>功能：返回服务器支持的请求方法</p>\n<p><strong>OPTIONS &#x2F; HTTP&#x2F;1.1</strong><br><strong>Host: localhost</strong></p>\n<ul>\n<li><img src=\"/../images/OPTIONS-Methond.png\" alt=\"OPTIONS方法做HTTP请求\"></li>\n</ul>\n</blockquote>\n</blockquote>\n<p>&nbsp;</p>\n<h4 id=\"常用状态码-及状态文字\"><a href=\"#常用状态码-及状态文字\" class=\"headerlink\" title=\"常用状态码(及状态文字)\"></a>常用状态码(及状态文字)</h4><blockquote>\n<p><strong>200：</strong> 服务器成功返回网页<br><strong>301&#x2F;302：</strong> 永久&#x2F;临时重定向</p>\n<ul>\n<li>分类<ul>\n<li><img src=\"/../images/302.png\" alt=\"默认302重定向\"></li>\n<li><img src=\"/../images/301.png\" alt=\"指定301重定向\"></li>\n</ul>\n</li>\n<li>问题<ul>\n<li>描述：一篇新闻，对于<strong>GET</strong>请求，重定向影响不大，能看到原来的内容即可。但对于<strong>POST</strong>请求，可能造成<strong>数据丢失</strong>。</li>\n<li>解决： <strong>307：</strong> <em><strong>重定向中保护原有的请求数据</strong></em><ul>\n<li>服务器上的资源暂时移动到了另一个URI，但是客户端应该继续使用原来的请求方法来访问新的URI。这个状态码与301和302重定向类似，但主要区别在于它不会改变客户端的请求方法（GET、POST等）。换言之，301和302重定向会改变客户端的请求方法。</li>\n<li><img src=\"/../images/302-Found.png\" alt=\"302 Found\"></li>\n<li><img src=\"/../images/301-Moved-Permanently.png\" alt=\"301 Moved Permanently\"></li>\n<li><img src=\"/../images/307-Temporary-Redirect.png\" alt=\"307 Temporary Redirect\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><em><strong>304 NOT MODIFIED：</strong></em> 未修改 </p>\n<ul>\n<li>例如一张图片(一般长期不变)：客户端第一次请求服务器获得这个图片后，之后的每次请求，服务器会告诉客户端我有这张图片，并告诉服务器自己对该图片的时间编号(<strong>ETag</strong>)，让服务器判断过期没，如果过期了，服务器再重新返回新的图片，否则客户端直接取缓存，节省连接，实现<strong>优化</strong>。</li>\n</ul>\n<p>失败状态码<br><strong>404 NOT FOUND：</strong> 请求的网页不存在</p>\n<ul>\n<li><img src=\"/../images/404-Not-Found.png\" alt=\"404 Not Found\"></li>\n</ul>\n<p><strong>503：</strong> 服务器暂时不可用<br><strong>500：</strong> 服务器内部问题</p>\n</blockquote>\n<h1 id=\"5-27\"><a href=\"#5-27\" class=\"headerlink\" title=\"5.27\"></a>5.27</h1><blockquote>\n<p><strong>PHP</strong> 是一种服务器端脚本语言，用于创建动态网页和应用程序。PHP文件通常包含HTML和PHP代码，可以由服务器解释并生成动态内容。PHP文件通常具有.php扩展名.</p>\n</blockquote>\n<h2 id=\"五、实战\"><a href=\"#五、实战\" class=\"headerlink\" title=\"五、实战\"></a>五、实战</h2><h3 id=\"一-PHP-socket编码-发送-HTTP请求\"><a href=\"#一-PHP-socket编码-发送-HTTP请求\" class=\"headerlink\" title=\"(一) PHP + socket编码 发送 HTTP请求\"></a>(一) PHP + socket编码 发送 HTTP请求</h3><blockquote>\n<p>要求：模拟 <strong>下载</strong>、<strong>注册</strong>、<strong>登陆</strong>、<strong>批量发帖</strong></p>\n<ul>\n<li>socket操作远程文件和读写本地的文件原理类型，可以理解为，本地文件通过硬件传输，而远程文件通过网线传输。</li>\n</ul>\n</blockquote>\n<h1 id=\"5-28\"><a href=\"#5-28\" class=\"headerlink\" title=\"5.28\"></a>5.28</h1><h3 id=\"1-socket编码发送GET请求\"><a href=\"#1-socket编码发送GET请求\" class=\"headerlink\" title=\"(1)socket编码发送GET请求\"></a>(1)socket编码发送GET请求</h3><blockquote>\n<ul>\n<li>PHP 中的 $ 符号用于声明变量，但变量的数据类型是在赋值时动态确定的</li>\n<li>$this 是一个特殊变量，它代表当前类的实例。当您在类的方法内部使用 $this-&gt; 时，它允许您访问类的私有（private）和受保护（protected）属性以及公共（public）属性</li>\n<li>在 PHP 中，接口（Interface）是一种特殊的类，它定义了一组方法签名，但不包含这些方法的具体实现。接口类似于 C++ 中的抽象基类（Abstract Base Class），它们都用于定义一组规范，使得实现这些接口的类必须提供这些方法的具体实现。</li>\n<li>在 PHP 中，类的构造函数通常以 __construct 命名，这是一个约定俗成的命名规则，而不是一个严格的语法规则</li>\n<li>array() 是一个函数，它用于创建一个数组。数组是一种数据结构，可以存储一系列键值对</li>\n<li>fsockopen() 函数。用于创建一个网络套接字(socket)，并通过它与远程服务器进行通信</li>\n<li>print_r 是一个函数，用于以易于理解的方式打印关于变量结构的信息。这个函数主要用于调试目的，它输出变量的类型和值，并且如果变量是数组或对象，还会输出它们的键和属性</li>\n</ul>\n</blockquote>\n<h1 id=\"5-29\"><a href=\"#5-29\" class=\"headerlink\" title=\"5.29\"></a>5.29</h1><blockquote>\n<p><em><strong>换行：</strong></em></p>\n<ul>\n<li>Linux   ‘\\n’</li>\n<li>macOS   ‘\\r’</li>\n<li>Windows ‘\\r\\n&#39;</li>\n<li>HTTP协议 <strong>‘\\r\\n’</strong></li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>Carriage Return（CR）回车</li>\n<li>Line Feed（LF）换行</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>在PHP中，<strong>fsockopen</strong>函数用于打开一个网络连接。这个函数允许你通过TCP或UDP协议与远程服务器进行通信</p>\n<p>基本语法：</p>\n<ul>\n<li>resource fsockopen ( string $hostname , int$port [, int $errno [, string$errstr [, float $timeout ]]]] )<ul>\n<li>hostname：要连接的服务器的域名或IP地址。</li>\n<li>port：要连接的服务器的端口号。</li>\n<li>errno：如果发生错误，将存储错误编号。</li>\n<li>errstr：如果发生错误，将存储错误描述。</li>\n<li>timeout：设置超时时间（以秒为单位）。如果设置为0，则函数会立即返回，不管连接是否成功。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>在PHP中，**”.&#x3D;”**（或 **”. +&#x3D;”**）是用于字符串的扩展赋值运算符。这个运算符用于将一个字符串追加到另一个字符串的末尾</p>\n</blockquote>\n<p>&nbsp;<br>&nbsp;<br><em><strong>代码：</strong></em></p>\n<blockquote>\n<p>定义了一个名为Http的类，该类实现了Proto接口。创建了一个Http对象，并调用其get方法来获取指定的URL的响应内容，并将其输出</p>\n</blockquote>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (一) 接口声明</span></span><br><span class=\"line\"><span class=\"comment\">// http 请求类的接口 包含四个方法 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Proto</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">conn</span>(<span class=\"params\"><span class=\"variable\">$url</span></span>)</span>; <span class=\"comment\">// 连接 URL</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>)</span>; <span class=\"comment\">// 发送 GET 查询</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\"></span>)</span>; <span class=\"comment\">// 发送 POST 查询</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span>(<span class=\"params\"></span>)</span>; <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//(二) 类实现 Http类 实现 Proto接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Http</span> <span class=\"keyword\">implements</span> <span class=\"title\">Proto</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"variable constant_\">CRLF</span> = <span class=\"string\">&quot;\\r\\n&quot;</span>; <span class=\"comment\">// Carriage return Line feed 回车换行</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$errno</span> = -<span class=\"number\">1</span>; <span class=\"comment\">// 如果发生错误，将存储错误编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$errstr</span> = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 如果发生错误，将存储错误描述</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$response</span> = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 响应内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$url</span>= <span class=\"literal\">null</span>; <span class=\"comment\">// URL 解析后的信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$version</span> = <span class=\"string\">&#x27;HTTP/1.1&#x27;</span>; <span class=\"comment\">// 协议版本</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$fh</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 文件句柄(file handle)，用于与服务器进行通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$line</span> = <span class=\"keyword\">array</span>(); <span class=\"comment\">// 请求行</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$header</span> = <span class=\"keyword\">array</span>(); <span class=\"comment\">// 头信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$body</span> = <span class=\"keyword\">array</span>(); <span class=\"comment\">// 主体信息</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 公共的构造函数——初始化连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$url</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">conn</span>(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setHeader</span>(<span class=\"string\">&#x27;Host: &#x27;</span> . <span class=\"variable\">$this</span>-&gt;url[<span class=\"string\">&#x27;host&#x27;</span>]); <span class=\"comment\">// 请求头部信息都差不多 直接写在构造函数里</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此方法负责写请求行</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLine</span>(<span class=\"params\"><span class=\"variable\">$method</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;line[<span class=\"number\">0</span>] = <span class=\"variable\">$method</span> . <span class=\"string\">&#x27; &#x27;</span> . <span class=\"variable language_\">$this</span>-&gt;url[<span class=\"string\">&#x27;path&#x27;</span>] . <span class=\"string\">&#x27; &#x27;</span> . <span class=\"variable language_\">$this</span>-&gt;version;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此方法负责写头信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeader</span>(<span class=\"params\"><span class=\"variable\">$headerLine</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;header[] = <span class=\"variable\">$headerLine</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此方法负责写主体信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setBody</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 连接URL 建立与服务器的连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">conn</span>(<span class=\"params\"><span class=\"variable\">$url</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;url = <span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>); <span class=\"comment\">// 解析URL</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置默认端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;url[<span class=\"string\">&#x27;port&#x27;</span>])) &#123; <span class=\"comment\">// 如果没分析出端口</span></span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;url[<span class=\"string\">&#x27;port&#x27;</span>] = <span class=\"number\">80</span>; <span class=\"comment\">// HTTP 请求的默认端口号</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"comment\">// 建立网络连接</span></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;fh = <span class=\"title function_ invoke__\">fsockopen</span>(<span class=\"variable\">$this</span>-&gt;url[<span class=\"string\">&#x27;host&#x27;</span>], <span class=\"variable\">$this</span>-&gt;url[<span class=\"string\">&#x27;port&#x27;</span>],<span class=\"variable\">$this</span>-&gt;errno, <span class=\"variable\">$whis</span>-&gt;errstr, <span class=\"number\">30</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果连接成功，返回一个文件句柄（file handle），这个句柄可以用来发送和接收数据</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果连接失败</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">$this</span>-&gt;fh) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;无法连接到服务器: <span class=\"subst\">$errstr</span> (<span class=\"subst\">$errno</span>)&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 构造 GET 请求的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setLine</span>(<span class=\"string\">&#x27;GET&#x27;</span>); <span class=\"comment\">// 设置请求行 (请求头信息已经在构造函数中设置)</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">request</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;response;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 构造 POST 请求的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 把 请求行、头信息、实体信息 合并到一个数组里，便于拼接</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$req</span> = <span class=\"title function_ invoke__\">array_merge</span>(<span class=\"variable\">$this</span>-&gt;line,<span class=\"variable\">$this</span>-&gt;header,<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;&#x27;</span>),<span class=\"variable language_\">$this</span>-&gt;body,<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">// print_r($req); </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable\">$req</span> = <span class=\"title function_ invoke__\">implode</span>(<span class=\"built_in\">self</span>::<span class=\"variable constant_\">CRLF</span>, <span class=\"variable\">$req</span>); <span class=\"comment\">// 拼接</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// echo $req; </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$this</span>-&gt;fh,<span class=\"variable\">$req</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!<span class=\"title function_ invoke__\">feof</span>(<span class=\"variable\">$this</span>-&gt;fh)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">$this</span>-&gt;response .= <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$this</span>-&gt;fh, <span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">close</span>(); <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t <span class=\"comment\">// return $this-&gt;response;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (三) 脚本执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&#x27;http://hcl.baidu.com/&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$http</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Http</span>(<span class=\"variable\">$url</span>); <span class=\"comment\">// 创建了应该http对象</span></span><br><span class=\"line\"><span class=\"comment\">// print_r($http); // 打印对象的属性 以验证请求是否成功</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$http</span>-&gt;<span class=\"title function_ invoke__\">get</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../images/0529.png\" alt=\"响应内容\"></p>\n<h3 id=\"2-socket编码发送POST请求\"><a href=\"#2-socket编码发送POST请求\" class=\"headerlink\" title=\"(2)socket编码发送POST请求\"></a>(2)socket编码发送POST请求</h3><p>在命令行中使用 telnet 命令连接到 <a href=\"http://mc.iproute.cn:16849/index.php\">http://mc.iproute.cn:16849/index.php</a></p>\n<blockquote>\n<ul>\n<li>telnet mc.iproute.cn 16849</li>\n<li>POST &#x2F;index.php HTTP&#x2F;1.1<br>   Host: localhost<br>  Content-type: application&#x2F;x-www-form-urlencoded<br>Content-length: 71<br>空行<br>datatable1_length&#x3D;10&amp;username&#x3D;aj&amp;content&#x3D;aaaa&amp;submit&#x3D;%E6%8F%90%E4%BA%A4</li>\n</ul>\n</blockquote>\n<h3 id=\"代码：\"><a href=\"#代码：\" class=\"headerlink\" title=\"代码：\"></a>代码：</h3><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (一) 接口声明</span></span><br><span class=\"line\"><span class=\"comment\">// http 请求类的接口 包含四个方法 </span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Proto</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">conn</span>(<span class=\"params\"><span class=\"variable\">$url</span></span>)</span>; <span class=\"comment\">// 连接 URL</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>)</span>; <span class=\"comment\">// 发送 GET 查询</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\"></span>)</span>; <span class=\"comment\">// 发送 POST 查询</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span>(<span class=\"params\"></span>)</span>; <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//(二) 类实现 Http类 实现 Proto接口</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Http</span> <span class=\"keyword\">implements</span> <span class=\"title\">Proto</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"variable constant_\">CRLF</span> = <span class=\"string\">&quot;\\r\\n&quot;</span>; <span class=\"comment\">// Carriage return Line feed 回车换行</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$errno</span> = -<span class=\"number\">1</span>; <span class=\"comment\">// 如果发生错误，将存储错误编号</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$errstr</span> = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 如果发生错误，将存储错误描述</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$response</span> = <span class=\"string\">&#x27;&#x27;</span>; <span class=\"comment\">// 响应内容</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$url</span>= <span class=\"literal\">null</span>; <span class=\"comment\">// URL 解析后的信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$version</span> = <span class=\"string\">&#x27;HTTP/1.1&#x27;</span>; <span class=\"comment\">// 协议版本</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$fh</span> = <span class=\"literal\">null</span>; <span class=\"comment\">// 文件句柄(file handle)，用于与服务器进行通信</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$line</span> = <span class=\"keyword\">array</span>(); <span class=\"comment\">// 请求行</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$header</span> = <span class=\"keyword\">array</span>(); <span class=\"comment\">// 头信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"variable\">$body</span> = <span class=\"keyword\">array</span>(); <span class=\"comment\">// 主体信息</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 公共的构造函数——初始化连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">__construct</span>(<span class=\"params\"><span class=\"variable\">$url</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">conn</span>(<span class=\"variable\">$url</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setHeader</span>(<span class=\"string\">&#x27;Host: &#x27;</span> . <span class=\"variable\">$this</span>-&gt;url[<span class=\"string\">&#x27;host&#x27;</span>]); <span class=\"comment\">// 请求头部信息都差不多 直接写在构造函数里</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此方法负责写请求行</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setLine</span>(<span class=\"params\"><span class=\"variable\">$method</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;line[<span class=\"number\">0</span>] = <span class=\"variable\">$method</span> . <span class=\"string\">&#x27; &#x27;</span> . <span class=\"variable language_\">$this</span>-&gt;url[<span class=\"string\">&#x27;path&#x27;</span>] . <span class=\"string\">&#x27; &#x27;</span> . <span class=\"variable language_\">$this</span>-&gt;version;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此方法负责写头信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setHeader</span>(<span class=\"params\"><span class=\"variable\">$headerLine</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;header[] = <span class=\"variable\">$headerLine</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 此方法负责写主体信息</span></span><br><span class=\"line\">\t<span class=\"keyword\">protected</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">setBody</span>(<span class=\"params\"><span class=\"variable\">$body</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;body[] = <span class=\"title function_ invoke__\">http_build_query</span>(<span class=\"variable\">$body</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 连接URL 建立与服务器的连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">conn</span>(<span class=\"params\"><span class=\"variable\">$url</span></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;url = <span class=\"title function_ invoke__\">parse_url</span>(<span class=\"variable\">$url</span>); <span class=\"comment\">// 解析URL</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 设置默认端口</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">isset</span>(<span class=\"variable language_\">$this</span>-&gt;url[<span class=\"string\">&#x27;port&#x27;</span>])) &#123; <span class=\"comment\">// 如果没分析出端口</span></span><br><span class=\"line\">            <span class=\"variable language_\">$this</span>-&gt;url[<span class=\"string\">&#x27;port&#x27;</span>] = <span class=\"number\">80</span>; <span class=\"comment\">// HTTP 请求的默认端口号</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\t<span class=\"comment\">// 建立网络连接</span></span><br><span class=\"line\">        <span class=\"variable language_\">$this</span>-&gt;fh = <span class=\"title function_ invoke__\">fsockopen</span>(<span class=\"variable\">$this</span>-&gt;url[<span class=\"string\">&#x27;host&#x27;</span>], <span class=\"variable\">$this</span>-&gt;url[<span class=\"string\">&#x27;port&#x27;</span>],<span class=\"variable\">$this</span>-&gt;errno, <span class=\"variable\">$whis</span>-&gt;errstr, <span class=\"number\">30</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 如果连接成功，返回一个文件句柄（file handle），这个句柄可以用来发送和接收数据</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 如果连接失败</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"variable language_\">$this</span>-&gt;fh) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">die</span>(<span class=\"string\">&quot;无法连接到服务器: <span class=\"subst\">$errstr</span> (<span class=\"subst\">$errno</span>)&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 构造 GET 请求的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setLine</span>(<span class=\"string\">&#x27;GET&#x27;</span>); <span class=\"comment\">// 设置请求行 (请求头信息已经在构造函数中设置)</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">request</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"variable language_\">$this</span>-&gt;response;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 构造 POST 请求的数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span>(<span class=\"params\"><span class=\"variable\">$body</span> = <span class=\"keyword\">array</span>(<span class=\"params\"></span>)</span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setLine</span>(<span class=\"string\">&#x27;POST&#x27;</span>); <span class=\"comment\">// 设置请求行 (请求头信息已经在构造函数中设置)</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 设置 Content-type</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setHeader</span>(<span class=\"string\">&#x27;Content-type: application/x-www-form-urlencoded&#x27;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// 先设置主体信息 (与GET不同)</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setBody</span>(<span class=\"variable\">$body</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后计算 Content-length</span></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">setHeader</span>(<span class=\"string\">&#x27;Content-length: &#x27;</span> . <span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$this</span>-&gt;body[<span class=\"number\">0</span>])); </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">request</span>();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// 请求</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 把 请求行、头信息、实体信息 合并到一个数组里，便于拼接</span></span><br><span class=\"line\">\t\t<span class=\"variable\">$req</span> = <span class=\"title function_ invoke__\">array_merge</span>(<span class=\"variable\">$this</span>-&gt;line,<span class=\"variable\">$this</span>-&gt;header,<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;&#x27;</span>), <span class=\"variable language_\">$this</span>-&gt;body, <span class=\"keyword\">array</span>(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">\t\t<span class=\"comment\">// print_r($req); </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable\">$req</span> = <span class=\"title function_ invoke__\">implode</span>(<span class=\"built_in\">self</span>::<span class=\"variable constant_\">CRLF</span>, <span class=\"variable\">$req</span>); <span class=\"comment\">// 拼接</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// echo $req; exit; // 调试是否拼接成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">fwrite</span>(<span class=\"variable\">$this</span>-&gt;fh,<span class=\"variable\">$req</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (!<span class=\"title function_ invoke__\">feof</span>(<span class=\"variable\">$this</span>-&gt;fh)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">$this</span>-&gt;response .= <span class=\"title function_ invoke__\">fread</span>(<span class=\"variable\">$this</span>-&gt;fh, <span class=\"number\">1024</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"variable language_\">$this</span>-&gt;<span class=\"title function_ invoke__\">close</span>(); <span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 关闭连接</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">close</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"title function_ invoke__\">fclose</span>(<span class=\"variable\">$this</span>-&gt;fh);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// -----------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// (三) 脚本执行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_ invoke__\">set_time_limit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$url</span> = <span class=\"string\">&#x27;http://mc.iproute.cn:16849/index.php&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"variable\">$i</span>=<span class=\"number\">1</span>; <span class=\"variable\">$i</span>&lt;<span class=\"number\">10</span>; <span class=\"variable\">$i</span>++)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 随机</span></span><br><span class=\"line\">\t<span class=\"variable\">$str</span> = <span class=\"title function_ invoke__\">str_shuffle</span>(<span class=\"string\">&#x27;abcdefghijklmnopqrst0123456789&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$username</span> = <span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$str</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">\t<span class=\"variable\">$content</span> = <span class=\"title function_ invoke__\">substr</span>(<span class=\"variable\">$str</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable\">$http</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Http</span>(<span class=\"variable\">$url</span>); <span class=\"comment\">// 创建了应该http对象</span></span><br><span class=\"line\">\t<span class=\"variable\">$http</span>-&gt;<span class=\"title function_ invoke__\">post</span>(<span class=\"keyword\">array</span>(<span class=\"string\">&#x27;datatable1_length&#x27;</span>=&gt;<span class=\"title function_ invoke__\">strlen</span>(<span class=\"variable\">$username</span> . <span class=\"variable\">$content</span> ),<span class=\"string\">&#x27;username&#x27;</span>=&gt;<span class=\"variable\">$username</span>,<span class=\"string\">&#x27;content&#x27;</span>=&gt;<span class=\"variable\">$content</span> ,<span class=\"string\">&#x27;submit&#x27;</span>=&gt;<span class=\"string\">&#x27;%E6%8F%90%E4%BA%A4&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> <span class=\"variable\">$username</span>, <span class=\"string\">&#x27;&lt;br /&gt;&#x27;</span>, <span class=\"variable\">$content</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title function_ invoke__\">usleep</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/../images/052900.png\"></p>\n","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"Windows cmd指令","date":"2024-05-23T09:58:08.000Z","path":"2024/05/23/windows_cmd指令/","text":"查看当前路径 cd 进入指定路径 cd path 返回上一层路径 cd .. 返回上两层路径 cd ..&#x2F;.. 查看当前路径下的目录 dir","content":"<blockquote>\n<ul>\n<li>查看当前路径<ul>\n<li>cd</li>\n</ul>\n</li>\n<li>进入指定路径<ul>\n<li>cd path</li>\n</ul>\n</li>\n<li>返回上一层路径<ul>\n<li>cd ..</li>\n</ul>\n</li>\n<li>返回上两层路径<ul>\n<li>cd ..&#x2F;..</li>\n</ul>\n</li>\n<li>查看当前路径下的目录<ul>\n<li>dir<br/></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","categories":[],"tags":[{"name":"语法","slug":"语法","permalink":"http://example.com/tags/%E8%AF%AD%E6%B3%95/"}]},{"title":"Markdown语法","date":"2024-05-23T04:46:38.000Z","path":"2024/05/23/Markdown语法学习 5.13/","text":"一、基本语法二、标题语法 分类 #一级标题#二级标题… 注意事项“#” 与 标题间用一个空格分隔 plus: plus:一级标题 plus:二级标题 三、段落语法 用制表符缩进段落 AAA BBB sada das dsadsa 四、换行语法末尾空两个或多个空格 / 用HTML的&lt;br&gt;标签 五、强调语法 粗体前后添加2个 星号 或 下划线 斜体前后添加1个 星号 或 下划线 斜粗体前后添加3个 星号 或 下划线 六、引用语法 创建块引用 在段落前加 多段落引用——段落之间的空表添加一个“***&gt;***” 嵌套块引用——在要嵌套的段落前添加一个“***&gt;&gt;***” 包含其他元素的引用 七、列表语法 有序列表 列表前添加数字并紧跟英文句点 数字不必按顺序，但列表以数字1起始 First item Second item Third item A B C a b Fourth item 无序列表 列表前加破折号(-),星号(*)或加号(+) 缩进创建嵌套列表 A B a b 嵌套其他元素 create a project input the following codes 12#inculde &lt;iostream&gt;using namespace std; ... s 八、代码语法 用反引号(&#96;)包裹想表示为单词或短语的代码 e.g. usingnamespace 代码中包含一个或多个反引号 用双反引号(&#96;&#96;)包裹 e.g. using namespace `std` 将代码块的每行至少缩进一个制表符或四个空格 在代码块前后使用三个反引号(&#96;&#96;&#96;)或三个波浪号(~~~) 高亮——指定语言 #include &lt;iostream&gt; using namespace std; int main() &#123; cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl; return 0; &#125; 九、分割线语法单独的一行使用三个或多个星号(*)、破折号(-)或下划线(_)a b 十、链接语法 链接文本放在括号内，链接地址放在后面的括号中，链接title可选 语法 [超链接显示名](超链接地址 &quot;超链接title&quot;) e.g. 这是一个链接百度 网址和Email地址 用尖括号(&lt;&gt;)可以把URL或email地址变成可点击的链接https://www.baidu.com/&#109;&#97;&#105;&#108;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109; 带格式化的链接 强调链接，在链接语法前后加星号 百度 将链接表示为代码，在方括号内加反引号 See the section on thie code 引用类型链接分为两部分：与文本保持内联的部分 和 存储在文件中其他位置的部分，使文本易于阅读 语法 第一部分 [显示为链接的文本] [标签] (标签指向存储在文档其他位置的链接) - 第二部分[标签]: &lt;链接的URL &quot;可选title&quot;&gt;(标签后紧跟一个冒号和至少一个空格) - 注： 链接的第二部分可放在文档的任何位置(出现的段落之后 或 文档的末尾(例如尾注或脚注)) - e.g. &gt; 文本中出现的 [引用内容][1] &gt; 参考引用： &gt; [1]: https://www.baidu.com/ s [显示文本] [1][1]: https://www.baidu.com/em 不支持好像 十一、图片语法 语法 ![替代文本](图片链接 &quot;可选标题&quot;) 十二、转义字符 要显示原本由于格式化的字符，在字符前添加反斜杠 十三、内嵌HTML标签 e.g.This word is bold.This word is italic. &nbsp; 边用边学换行 (1) &amp;nbsp;&nbsp; (2) &lt;br&#x2F;&gt; &nbsp; 插入图片 基本语法： ![图片描述 可省略](图片地址：URL连接或者本地链接) &nbsp; 表格 (1)使用竖线 ‘|’ 来分隔列，并使用连字符 ‘-‘ 来分隔表头和表行(表头和表行之间的分隔线至少要有三个连字符 -) 基本示例：| 标题 1 | 标题 2 | 标题 3 ||——-|——-|——-|| 单元格 1 | 单元格 2 | 单元格 3 || 单元格 4 | 单元格 5 | 单元格 6 | 将产生如下表格： 标题 1 标题 2 标题 3 单元格 1 单元格 2 单元格 3 单元格 4 单元格 5 单元格 6 (2)表格对齐在分隔线中添加冒号 ‘:’。 冒号放在分隔线的左侧将左对齐该列，放在右侧将右对齐该列，同时放在两侧将居中对齐该列 基本示例：| 左对齐 | 居中对齐 | 右对齐 ||:——|:——: |——: || 单元格 1 | 单元格 2 | 单元格 3 || 单元格 4 | 单元格 5 | 单元格 6 | 将产生如下单元格 左对齐 居中对齐 右对齐 单元格 1 单元格 2 单元格 3 单元格 4 单元格 5 单元格 6","content":"<h1 id=\"一、基本语法\"><a href=\"#一、基本语法\" class=\"headerlink\" title=\"一、基本语法\"></a>一、基本语法</h1><h1 id=\"二、标题语法\"><a href=\"#二、标题语法\" class=\"headerlink\" title=\"二、标题语法\"></a>二、标题语法</h1><blockquote>\n<ul>\n<li><p>分类</p>\n<p>#一级标题<br>#二级标题<br>…</p>\n</li>\n<li><p>注意事项<br>“#” 与 标题间用一个空格分隔</p>\n</li>\n</ul>\n<p>plus:</p>\n<ul>\n<li><h1 id=\"plus-一级标题\"><a href=\"#plus-一级标题\" class=\"headerlink\" title=\"plus:一级标题\"></a>plus:一级标题</h1></li>\n<li><h2 id=\"plus-二级标题\"><a href=\"#plus-二级标题\" class=\"headerlink\" title=\"plus:二级标题\"></a>plus:二级标题</h2></li>\n</ul>\n</blockquote>\n<h1 id=\"三、段落语法\"><a href=\"#三、段落语法\" class=\"headerlink\" title=\"三、段落语法\"></a>三、段落语法</h1><blockquote>\n<p>用制表符缩进段落</p>\n</blockquote>\n<pre><code>AAA\nBBB\nsada das\ndsadsa\n</code></pre>\n<h1 id=\"四、换行语法\"><a href=\"#四、换行语法\" class=\"headerlink\" title=\"四、换行语法\"></a>四、换行语法</h1><pre><code>末尾空两个或多个空格 / 用HTML的&lt;br&gt;标签\n</code></pre>\n<h1 id=\"五、强调语法\"><a href=\"#五、强调语法\" class=\"headerlink\" title=\"五、强调语法\"></a>五、强调语法</h1><blockquote>\n<ul>\n<li><p><strong>粗体</strong><br>前后添加2个 <strong>星号</strong> 或 <strong>下划线</strong></p>\n</li>\n<li><p><em>斜体</em><br>前后添加1个 <em>星号</em> 或 <em>下划线</em></p>\n</li>\n<li><p><em><strong>斜粗体</strong></em><br>前后添加3个 <em><strong>星号</strong></em> 或 <em><strong>下划线</strong></em></p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"六、引用语法\"><a href=\"#六、引用语法\" class=\"headerlink\" title=\"六、引用语法\"></a>六、引用语法</h1><blockquote>\n<p>创建块引用 在段落前加 </p>\n<ul>\n<li><p>多段落引用——段落之间的空表添加一个“***&gt;***”</p>\n</li>\n<li><p>嵌套块引用——在要嵌套的段落前添加一个“***&gt;&gt;***”</p>\n</li>\n<li><p>包含其他元素的引用</p>\n</li>\n</ul>\n</blockquote>\n<h1 id=\"七、列表语法\"><a href=\"#七、列表语法\" class=\"headerlink\" title=\"七、列表语法\"></a>七、列表语法</h1><blockquote>\n<p><em><strong>有序列表</strong></em></p>\n<ul>\n<li>列表前添加数字并紧跟英文句点</li>\n<li>数字不必按顺序，但列表以数字1起始</li>\n</ul>\n</blockquote>\n<ol>\n<li>First item</li>\n<li>Second item</li>\n<li>Third item<ol>\n<li>A</li>\n<li>B</li>\n<li>C<ol>\n<li>a</li>\n<li>b</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Fourth item</li>\n</ol>\n<blockquote>\n<p><em><strong>无序列表</strong></em></p>\n<ul>\n<li>列表前加破折号(-),星号(*)或加号(+)</li>\n<li>缩进创建嵌套列表</li>\n</ul>\n</blockquote>\n<ul>\n<li>A</li>\n</ul>\n<ul>\n<li>B<ul>\n<li>a<ul>\n<li>b</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><em><strong>嵌套其他元素</strong></em></p>\n</blockquote>\n<ol>\n<li>create a project</li>\n<li>input the following codes <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#inculde <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br></pre></td></tr></table></figure>\n<pre><code> ...\n</code></pre>\n</li>\n<li>s</li>\n</ol>\n<h1 id=\"八、代码语法\"><a href=\"#八、代码语法\" class=\"headerlink\" title=\"八、代码语法\"></a>八、代码语法</h1><ul>\n<li>用反引号(&#96;)包裹想表示为单词或短语的代码<ul>\n<li>e.g.<br>  <code>usingnamespace</code></li>\n</ul>\n</li>\n<li>代码中包含一个或多个反引号 用双反引号(&#96;&#96;)包裹<ul>\n<li>e.g.<br>  <code>using namespace `std`</code></li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<ul>\n<li>将代码块的每行至少缩进一个制表符或四个空格</li>\n<li>在代码块前后使用三个反引号(&#96;&#96;&#96;)或三个波浪号(~~~)</li>\n<li>高亮——指定语言</li>\n</ul>\n</blockquote>\n<pre><code class=\"C++\">#include &lt;iostream&gt;\nusing namespace std;\nint main()\n&#123;\n    cout &lt;&lt; &quot;Hello World!&quot; &lt;&lt; endl;\n    return 0;\n&#125;\n</code></pre>\n<ul>\n<li></li>\n</ul>\n<h1 id=\"九、分割线语法\"><a href=\"#九、分割线语法\" class=\"headerlink\" title=\"九、分割线语法\"></a>九、分割线语法</h1><p>单独的一行使用三个或多个星号(*)、破折号(-)或下划线(_)<br>a</p>\n<hr>\n<p>b</p>\n<hr>\n<h1 id=\"十、链接语法\"><a href=\"#十、链接语法\" class=\"headerlink\" title=\"十、链接语法\"></a>十、链接语法</h1><ul>\n<li><p>链接文本放在括号内，链接地址放在后面的括号中，链接title可选</p>\n<ul>\n<li>语法<br>  <code>[超链接显示名](超链接地址 &quot;超链接title&quot;)</code><ul>\n<li>e.g. 这是一个链接<a href=\"https://www.baidu.com/\" title=\"中国最大的搜索引擎\">百度</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>网址和Email地址</p>\n<ul>\n<li>用尖括号(&lt;&gt;)可以把URL或email地址变成可点击的链接<br><a href=\"https://www.baidu.com/\">https://www.baidu.com/</a><br><a href=\"mailto:&#109;&#97;&#105;&#108;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;\">&#109;&#97;&#105;&#108;&#64;&#113;&#x71;&#x2e;&#x63;&#x6f;&#109;</a></li>\n</ul>\n</li>\n<li><p>带格式化的链接</p>\n<ul>\n<li>强调链接，在链接语法前后加星号<ul>\n<li><em><strong><a href=\"https://www.baidu.com/\">百度</a></strong></em></li>\n</ul>\n</li>\n<li>将链接表示为代码，在方括号内加反引号<ul>\n<li>See the section on thie <a href=\"#code\"><code>code</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>引用类型链接<br>分为两部分：与文本保持内联的部分 和 存储在文件中其他位置的部分，使文本易于阅读</p>\n<ul>\n<li>语法<ul>\n<li>第一部分</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><code>[显示为链接的文本] [标签]</code> (标签指向存储在文档其他位置的链接)<br>        - 第二部分<br><code>[标签]: &lt;链接的URL &quot;可选title&quot;&gt;</code><br>(标签后紧跟一个冒号和至少一个空格)<br>        - 注： 链接的第二部分可放在文档的任何位置(出现的段落之后 或 文档的末尾(例如尾注或脚注))<br>    - e.g.<br>        &gt; 文本中出现的 [引用内容][1]<br>        &gt; 参考引用：<br>        &gt; [1]: <a href=\"https://www.baidu.com/\">https://www.baidu.com/</a></p>\n<p>s [显示文本] [1]<br>[1]: <a href=\"https://www.baidu.com/\">https://www.baidu.com/</a><br>em 不支持好像</p>\n<h1 id=\"十一、图片语法\"><a href=\"#十一、图片语法\" class=\"headerlink\" title=\"十一、图片语法\"></a>十一、图片语法</h1><ul>\n<li>语法</li>\n</ul>\n<p><code>![替代文本](图片链接 &quot;可选标题&quot;)</code></p>\n<h1 id=\"十二、转义字符\"><a href=\"#十二、转义字符\" class=\"headerlink\" title=\"十二、转义字符\"></a>十二、转义字符</h1><ul>\n<li>要显示原本由于格式化的字符，在字符前添加反斜杠</li>\n</ul>\n<h1 id=\"十三、内嵌HTML标签\"><a href=\"#十三、内嵌HTML标签\" class=\"headerlink\" title=\"十三、内嵌HTML标签\"></a>十三、内嵌HTML标签</h1><ul>\n<li>e.g.<br>This <strong>word</strong> is bold.<br>This <em>word</em> is italic.</li>\n</ul>\n<p>&nbsp;</p>\n<h1 id=\"边用边学\"><a href=\"#边用边学\" class=\"headerlink\" title=\"边用边学\"></a>边用边学</h1><h4 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h4><blockquote>\n<ul>\n<li><strong>(1)</strong> &amp;nbsp;<br>&nbsp; </li>\n<li><strong>(2)</strong> &lt;br&#x2F;&gt;<br/></li>\n</ul>\n</blockquote>\n<p>&nbsp;</p>\n<h4 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h4><blockquote>\n<ul>\n<li>基本语法：<ul>\n<li>![图片描述 可省略](图片地址：URL连接或者本地链接)</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&nbsp;</p>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><blockquote>\n<p><strong>(1)使用竖线 <strong>‘|’</strong> 来分隔列，并使用连字符 <strong>‘-‘</strong> 来分隔表头和表行(表头和表行之间的分隔线至少要有三个连字符 -)</strong></p>\n<p>基本示例：<br><strong>| 标题 1 | 标题 2 | 标题 3 |</strong><br><strong>|——-|——-|——-|</strong><br><strong>| 单元格 1 | 单元格 2 | 单元格 3 |</strong><br><strong>| 单元格 4 | 单元格 5 | 单元格 6 |</strong></p>\n<p>  将产生如下表格：</p>\n<table>\n<thead>\n<tr>\n<th>标题 1</th>\n<th>标题 2</th>\n<th>标题 3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元格 1</td>\n<td>单元格 2</td>\n<td>单元格 3</td>\n</tr>\n<tr>\n<td>单元格 4</td>\n<td>单元格 5</td>\n<td>单元格 6</td>\n</tr>\n</tbody></table>\n<p><strong>(2)表格对齐</strong><br>在分隔线中添加冒号 <strong>‘:’</strong>。 冒号放在分隔线的左侧将左对齐该列，放在右侧将右对齐该列，同时放在两侧将居中对齐该列</p>\n<p>基本示例：<br><strong>| 左对齐 | 居中对齐 | 右对齐 |</strong><br><strong>|:——|:——: |——: |</strong><br><strong>| 单元格 1 | 单元格 2 | 单元格 3 |</strong><br><strong>| 单元格 4 | 单元格 5 | 单元格 6 |</strong></p>\n<p>将产生如下单元格</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">左对齐</th>\n<th align=\"center\">居中对齐</th>\n<th align=\"right\">右对齐</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">单元格 1</td>\n<td align=\"center\">单元格 2</td>\n<td align=\"right\">单元格 3</td>\n</tr>\n<tr>\n<td align=\"left\">单元格 4</td>\n<td align=\"center\">单元格 5</td>\n<td align=\"right\">单元格 6</td>\n</tr>\n</tbody></table>\n</blockquote>\n","categories":[],"tags":[{"name":"语法","slug":"语法","permalink":"http://example.com/tags/%E8%AF%AD%E6%B3%95/"}]},{"title":"网络工作原理","date":"2024-05-23T04:46:38.000Z","path":"2024/05/23/Network-working-principle/","text":"内容 ISP： 即互联网服务提供商（例如国内各大运营商），搭建、维护相关设施，提供互联网服务。需要投入大量成本，故ISP是有偿提供网络接入，所以宽带要限速、计费 &nbsp; NAT、端口映射 NAT： 网络地址转换，局域网内设备的IP地址被网关映射为统一地址，接入网络，但存在无法精准传送数据的问题。 端口映射： 在IP地址后面增加一串端口号，网关以不同的端口与外网交互，把端口号映射给局域网内的各个设备.传输数据时，映射IP地址和端口号，来实现以共同的IP精准传送数据。 &nbsp; 局域网： 若能互联的干台设备组成的网络 广域网： 设备数量庞大的局域网 IP地址： 每台设备都有一个的独自的数字虚拟地址，以联网时辨别、区分于其他设备 分类 公有IP &#x2F; 私有IP： 网关拥有的可以直接在广域网上交互数据的IP地址 &#x2F; 只能局域网内有效使用（能区分于其他设备）的IP地址 IPV4 &#x2F; IPV6： IPV4和IPV6是两个不同协议，不能直接互通，需要借助其他设备做转换和映射，导致短时间内IPV6无法完全取代IPV4，但IPV6是大势所趋。 &nbsp; - IPV4： 32位二进制构成，理论上能提供 2^32(约42.28亿) 个地址。为方便记忆、输入，将每8位二进制分为1组，转换为十进制，转化成4个0~255的数字。但一些地址特殊用途，保留下来不提供给大众使用，真正可用的IP地址只有36.47亿个，而当今世界约有80亿人，很多人都有接入互联网的需求，且每个人的设备不止一台(PC,laptop,iPad,mobile phone)，自2011年底，IPV4已经面临枯竭。&nbsp; - IPV6： 由8组四位十六进制组合而成，理论上能 3.4*10^38 个IP地址，足够为地球上每一个沙子发一个独立IP。 &nbsp; 域名： 每个IP地址对应一个域名，以便于记忆和输入. DNS服务器： 用于查询域名对应的IP地址。电脑自动或许宽带运营商DNS服务器的IP地址，或到指定的公共DNS服务器上查询。若能查到，DNS服务器会返回对于的IP地址，否则，这台DNS服务器会问根域名 服务器， 参考文献(1)https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=trigger_reload&amp;vd_source=df38266eedfef61aa7370319919d94d7&nbsp;(2)https://www.bilibili.com/video/BV1VE41187N7/?spm_id_from=333.788.recommend_more_video.2&amp;vd_source=df38266eedfef61aa7370319919d94d7","content":"<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><blockquote>\n<ul>\n<li><em><strong>ISP：</strong></em> 即互联网服务提供商（例如国内各大运营商），搭建、维护相关设施，提供互联网服务。需要投入大量成本，故ISP是有偿提供网络接入，所以宽带要限速、计费</li>\n</ul>\n</blockquote>\n<p>&nbsp;</p>\n<blockquote>\n<ul>\n<li><em><strong>NAT、端口映射</strong></em><ul>\n<li><strong>NAT：</strong> 网络地址转换，局域网内设备的IP地址被网关映射为统一地址，接入网络，但存在无法精准传送数据的问题。</li>\n<li><strong>端口映射：</strong> 在IP地址后面增加一串端口号，网关以不同的端口与外网交互，把端口号映射给局域网内的各个设备.传输数据时，映射IP地址和端口号，来实现以共同的IP精准传送数据。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>&nbsp;</p>\n<blockquote>\n<ul>\n<li><em><strong>局域网：</strong></em> 若能互联的干台设备组成的网络<ul>\n<li><strong>广域网：</strong> 设备数量庞大的局域网</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<br/>\n\n<blockquote>\n<ul>\n<li><em><strong>IP地址：</strong></em> 每台设备都有一个的独自的数字虚拟地址，以联网时辨别、区分于其他设备<ul>\n<li><strong>分类</strong><ul>\n<li><strong>公有IP &#x2F; 私有IP：</strong> 网关拥有的可以直接在广域网上交互数据的IP地址 &#x2F; 只能局域网内有效使用（能区分于其他设备）的IP地址</li>\n<li><strong>IPV4 &#x2F; IPV6：</strong> IPV4和IPV6是两个不同协议，不能直接互通，需要借助其他设备做转换和映射，导致短时间内IPV6无法完全取代IPV4，但IPV6是大势所趋。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>&nbsp;<br>     - <strong>IPV4：</strong> 32位二进制构成，理论上能提供 2^32(约42.28亿) 个地址。为方便记忆、输入，将每8位二进制分为1组，转换为十进制，转化成4个0~255的数字。但一些地址特殊用途，保留下来不提供给大众使用，真正可用的IP地址只有36.47亿个，而当今世界约有80亿人，很多人都有接入互联网的需求，且每个人的设备不止一台(PC,laptop,iPad,mobile phone)，自2011年底，IPV4已经面临枯竭。<br>&nbsp;<br>     - <strong>IPV6：</strong> 由8组四位十六进制组合而成，理论上能 3.4*10^38 个IP地址，足够为地球上每一个沙子发一个独立IP。</p>\n</blockquote>\n<p>&nbsp;</p>\n<blockquote>\n<ul>\n<li><em><strong>域名：</strong></em> 每个IP地址对应一个域名，以便于记忆和输入.</li>\n<li><em><strong>DNS服务器：</strong></em> 用于查询域名对应的IP地址。电脑自动或许宽带运营商DNS服务器的IP地址，或到指定的公共DNS服务器上查询。若能查到，DNS服务器会返回对于的IP地址，否则，这台DNS服务器会问根域名 服务器，</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><strong>(1)</strong><br><a href=\"https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=trigger_reload&amp;vd_source=df38266eedfef61aa7370319919d94d7\">https://www.bilibili.com/video/BV1DD4y127r4/?spm_id_from=trigger_reload&amp;vd_source=df38266eedfef61aa7370319919d94d7</a><br>&nbsp;<br><strong>(2)</strong><br><a href=\"https://www.bilibili.com/video/BV1VE41187N7/?spm_id_from=333.788.recommend_more_video.2&amp;vd_source=df38266eedfef61aa7370319919d94d7\">https://www.bilibili.com/video/BV1VE41187N7/?spm_id_from=333.788.recommend_more_video.2&amp;vd_source=df38266eedfef61aa7370319919d94d7</a></p>\n<hr>\n","categories":[],"tags":[{"name":"技术","slug":"技术","permalink":"http://example.com/tags/%E6%8A%80%E6%9C%AF/"}]},{"title":"Hello World","date":"2024-05-23T04:44:52.000Z","path":"2024/05/23/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[],"tags":[{"name":"测试","slug":"测试","permalink":"http://example.com/tags/%E6%B5%8B%E8%AF%95/"}]}]